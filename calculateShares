package liquidity

import (
	"fmt"

	sdk "github.com/cosmos/cosmos-sdk/types"
)

// LiquidityPool represents a liquidity pool
type LiquidityPool struct {
	ID          uint64         `json:"id"`
	ReserveA     sdk.Coin       `json:"reserve_a"`
	ReserveB     sdk.Coin       `json:"reserve_b"`
	Liquidity    sdk.Coin       `json:"liquidity"`
	TotalShares  sdk.Dec        `json:"total_shares"`
}

// MsgAddLiquidity defines the AddLiquidity message
type MsgAddLiquidity struct {
	Sender    sdk.AccAddress `json:"sender"`
	PoolID    uint64         `json:"pool_id"`
	AssetA    sdk.Coin       `json:"asset_a"`
	AssetB    sdk.Coin       `json:"asset_b"`
	MinShares sdk.Dec        `json:"min_shares"`
}

// HandleMsgAddLiquidity handles the AddLiquidity message
func HandleMsgAddLiquidity(ctx sdk.Context, k Keeper, msg MsgAddLiquidity) sdk.Result {
	pool, found := k.GetLiquidityPool(ctx, msg.PoolID)
	if !found {
		return sdk.ErrUnknownRequest(fmt.Sprintf("liquidity pool with ID %d not found", msg.PoolID)).Result()
	}

	// Calculate liquidity shares
	shares := calculateShares(pool.TotalShares, msg.AssetA.Amount, pool.ReserveA.Amount)

	// Check if calculated shares meet the minimum requirement
	if shares.LT(msg.MinShares) {
		return sdk.ErrInsufficientCoins(fmt.Sprintf("calculated shares %s less than minimum required %s", shares.String(), msg.MinShares.String())).Result()
	}

	// Update pool state
	pool.ReserveA = pool.ReserveA.Add(msg.AssetA)
	pool.ReserveB = pool.ReserveB.Add(msg.AssetB)
	pool.TotalShares = pool.TotalShares.Add(shares)

	// Update liquidity pool in the store
	k.SetLiquidityPool(ctx, pool)

	// Emit an event
	ctx.EventManager().EmitEvent(
		sdk.NewEvent(
			sdk.EventTypeMessage,
			sdk.NewAttribute(sdk.AttributeKeyModule, sdk.AttributeValueCategory),
		),
		sdk.NewEvent(
			"AddLiquidity",
			sdk.NewAttribute("PoolID", fmt.Sprintf("%d", msg.PoolID)),
			sdk.NewAttribute("Shares", shares.String()),
		),
	)

	return sdk.Result{Code: sdk.CodeOK, Events: ctx.EventManager().ABCIEvents()}
}

// calculateShares calculates the liquidity shares based on the current pool state and added assets
func calculateShares(totalShares sdk.Dec, addedAssetAmount sdk.Int, reserveAmount sdk.Int) sdk.Dec {
	// Your calculation logic here...
	// This is a simplified example, you may need to consider slippage, fees, etc.
	return totalShares.Mul(addedAssetAmount.ToDec()).Quo(reserveAmount.ToDec())
}
